package stardust.entities.boss;

import org.lwjgl.opengl.GL11;

import stardust.StardustGame;
import stardust.entities.Explosion;
import stardust.entities.Projectile;
import stardust.entities.StardustEntity;
import engine.Vector;
import engine.gfx.Camera;

public class Ceraphim extends StardustEntity{
	
	public Ceraphim(StardustGame game, double x, double y) {
		super(game);
		setXY(x,y);
		setBoundRadius(16);
		setDirection(0);
		setSpeedVector(t, speed);
		blip();
	}
	
	// movement
	private double dirT=0;
	private boolean resetStrafe=true;
	private boolean strafeLeft=true;
	private void moveRandomly(double dt){
		dirT+=dt;
		if(dirT>0.5){
			dirT-=0.5;
			t+=game.$prng().$int(-1, 1)*(Math.PI/4);
			t=Vector.constrainTheta(t);
			setSpeedVector(t, speed);
		}
	}
	private void strafeAcrossPlayer(){
		if(resetStrafe){
			if(x>target.$x()){
				strafeLeft=true;
			}else{
				strafeLeft=false;
			}
			resetStrafe=false;
		}
		if(strafeLeft){
			if(x>target.$x()-120){
				setSpeedVector(Vector.directionFromTo(x, y, target.$x()-120, target.$y()-120), speed*3);
			}else{
				dx=0;
				dy=0;
			}
		}else{
			if(x<target.$x()+120){
				setSpeedVector(Vector.directionFromTo(x, y, target.$x()+120, target.$y()-120), speed*3);
			}else{
				dx=0;
				dy=0;
			}
		}
		
	}
	
	// bullet hail
	private double circT=0, circAimT=0, circReloadT=0;
	private int circAmmo=0;
	private double pointT=0, pointReloadT=0;
	private int pointAmmo=0;
	private void useBulletHail(double dt){
		// circle of doom
		if(circAmmo<1){
			circReloadT+=dt;
			if(circReloadT>2){
				circReloadT=0;
				circAmmo=64;
			}
		}else{
			circT+=dt;
			if(circT>=0.0125){
				circT-=0.0125;
				circAimT+=Math.PI/16;
				for(int i=0;i<2;i++){
					game.$currentState().addEntity(new StardustProjectile(game, (i*(Math.PI/3))+circAimT, this));
					game.$currentState().addEntity(new StardustProjectile(game, -(i*(Math.PI/3))-circAimT, this));
				}
				circAmmo--;
			}
		}
		// spray and pray
		if(pointAmmo<1){
			pointReloadT+=dt;
			if(pointReloadT>1.5){
				pointReloadT=0;
				pointAmmo=64;
			}
		}else{
			pointT+=dt;
			if(pointT>=0.0125){
				pointT-=0.0125;
				game.$currentState().addEntity(new StardustProjectile(game, game.$prng().$double(0, 2*Math.PI), this));
				pointAmmo--;
			}
		}
	}
	
	// missile swarm
	private double mscd=0;
	private void useMissileSwarm(double dt){
		mscd+=dt;
		if(mscd>0.25){
			//double tt=directionTo(target);
			game.$currentState().addEntity(new CeraphimMissile(game, game.$prng().$double(0, 2*Math.PI), this, target));
			game.$currentState().addEntity(new CeraphimMissile(game, game.$prng().$double(0, 2*Math.PI), this, target));
			mscd-=0.25;
		}
	}
	
	// missile swarm
	private double bcd=0;
	private void useBombs(double dt){
		bcd+=dt;
		if(bcd>0.125){
			for(int i=0;i<2;i++){
				game.$currentState().addEntity(new CeraphimBomb(game, this));
			}
			bcd-=0.125;
		}
	}
	
	// meteor strike
	private double mcd=0;
	private void useMeteorStrike(double dt){
		mcd+=dt;
		if(mcd>0.5){
			StardustEntity e=new Meteoroid(game, 0, this);
			double ddx=target.$x()+game.$prng().$double(-game.$displayWidth()/2, game.$displayWidth()/2)/game.$camera().$zoom();
			double ddy=target.$y()-(game.$displayHeight()/2)/game.$camera().$zoom();
			e.setXY(ddx, ddy);
			e.setSpeedVector(e.directionTo(target), game.$prng().$double(120, 240));
			game.$currentState().addEntity(e);
			mcd-=0.5;
		}
	}
	
	// other vars
	private int health=3;
	private int halor=40;
	private double speed=90;
	private double attackt=0;
	private double attackd=3;
	private double deathT=0, expT=0, tt=0;
	public int $health(){
		return health;
	}
	public void damage(){
		health--;
	}
	
	public void update(double dt){
		
		tt+=Math.PI/2*dt;
		
		// death
		if(health<1){
			blip();
			deathT+=dt;
			expT+=dt;
			if(expT>0.075){
				expT-=0.075;
				double tt=game.$prng().$double(0, 2*Math.PI);
				double di=game.$prng().$double(0, r*25);
				double dx=Vector.vectorToDx(tt, di);
				double dy=Vector.vectorToDy(tt, di);
				int w=game.$prng().$int(4, 16);
				game.$currentState().addEntity(new Explosion(game, x+dx, y+dy, w));
			}
			if(deathT>1.5){
				//StardustState s=(StardustState)State.$state(1);
				//s.addEntity(new ElectromagneticPulse(game,$x(),$y()));
				//active=false;
			}
			return;			
		}
		
		updateBlip(dt);
		updatePosition(dt);
		wraparoundIfOutOfBounds();
		
		// attack/movement cycles
		if(attackd>0){
			attackd-=dt;
			moveRandomly(dt);
		}else if(health>2){
			attackt+=dt;
			if(attackt%24<=8){
				moveRandomly(dt);
				useBulletHail(dt);
			}else if(attackt%24<=12){
				moveRandomly(dt);
				useMissileSwarm(dt);
				resetStrafe=true;
			}else if(attackt%24<=14){
				strafeAcrossPlayer();
				useBombs(dt);
			}else if(attackt%24<=18){
				moveRandomly(dt);
				useMissileSwarm(dt);
				resetStrafe=true;
			}else if(attackt%24<=20){
				strafeAcrossPlayer();
				useBombs(dt);
			}else{
				moveRandomly(dt);
				useMeteorStrike(dt);
			}
		}
		
		// iron halo
		for(StardustEntity e:game.$currentState().$entities()){
			if(e instanceof Projectile && ((Projectile)e).$owner()==this){
				continue;
			}
			if(e==this || !e.isCollidable()){
				continue;
			}
			if(Vector.distanceFromTo(x, y-12, e.$x(), e.$y())<halor+e.$r()){
				e.setKiller(this);
				e.deactivate();
				if(e instanceof Projectile){
					game.$currentState().addEntity(new Explosion(game, e.$x(), e.$y(), 4));
				}else{
					game.$currentState().addEntity(new Explosion(game, e.$x(), e.$y(), (int)e.$r()));
				}
			}
		}
	}
	
	private double[][] skull={
		{-1,-72,-4,-72,-4,-72,-15,-60,-15,-60,-16,-59,-16,-59,-26,-51,-26,-51,-29,-70,-29,-70,-41,-80,-41,-80,-39,-92,-39,-92,-22,-109,-22,-109,-13,-121,-13,-121,-11,-142,-11,-142,-9,-149,-9,-149,-8,-143,-8,-143,0,-124,-167,-120,-149,-104,-149,-104,-128,-91,-128,-91,-108,-97,-108,-97,-95,-107,-95,-107,-76,-107,-76,-107,-53,-104,-53,-104,-45,-118,-45,-118,-42,-130,-42,-130,-39,-149,-39,-149,-38,-160,-38,-160,-28,-172,-28,-172,-48,-183,-48,-183,-63,-185,-63,-185,-82,-187,-82,-187,-95,-199,-95,-199,-122,-181,-122,-181,-137,-166,-137,-166,-156,-146,-156,-146,-165,-130,-165,-130,-165,-122,-165,-122,-165,-117,-5,16,-7,2,-7,2,-19,-12,-19,-12,-20,-15,-20,-15,-25,-2,-25,-2,-25,12,-25,12,-18,27,-18,27,-8,28,-8,28,-10,16,-10,16,-4,9,-36,-1,-46,-13,-46,-13,-49,-17,-49,-17,-49,5,-49,5,-48,20,-48,20,-43,25,-43,25,-38,26,-38,26,-38,18,-38,18,-35,14,-35,14,-32,7,-32,7,-36,-3,-36,-3,-36,-3,-63,14,-67,-5,-67,-5,-69,-7,-69,-7,-71,11,-71,11,-70,28,-70,28,-63,36,-63,36,-61,39,-61,39,-51,35,-51,35,-51,27,-51,27,-58,20,-58,20,-59,14,-59,14,-65,6,-72,43,-72,50,-72,50,-59,54,-59,54,-46,54,-46,54,-50,47,-50,47,-51,46,-51,46,-51,44,-76,53,-78,61,-78,61,-74,68,-74,68,-65,68,-65,68,-65,68,-65,68,-46,70,-46,70,-54,61,-54,61,-55,60,-55,60,-55,56,-48,218,-48,205,-48,205,-42,188,-42,188,-37,199,-37,199,-35,201,-35,201,-34,210,-34,210,-41,219,-41,219,-48,219,-48,219,-48,218,-38,219,-33,211,-33,211,-22,203,-22,203,-13,215,-13,215,-13,229,-13,229,-24,233,-24,233,-34,227,-34,227,-31,222,-31,222,-31,222,-8,232,-10,233,-10,233,-15,222,-15,222,-2,219,-2,219,0,222,0,222,0,229,0,229,-4,236,-4,236,-8,231,-57,209,-67,207,-67,207,-71,200,-71,200,-71,192,-71,192,-64,189,-64,189,-54,197,-54,197,-50,204,-50,204,-57,214,-57,214,-57,212,-70,170,-73,167,-73,167,-79,157,-79,157,-63,153,-63,153,-50,160,-50,160,-49,173,-49,173,-58,178,-58,178,-62,178,-62,178,-69,174,-69,174,-72,174,-72,174,-72,170,-72,170,-83,167,-74,179,-77,179,-77,179,-82,187,-82,187,-62,194,-62,194,-55,191,-55,191,-50,183,-50,183,-73,177,-73,177,-74,176,-78,220,-61,228,-61,228,-51,244,-51,244,-33,264,-33,264,-18,266,-18,266,-9,266,-9,266,0,272,-77,219,-91,201,-91,201,-88,175,-88,175,-98,163,-98,163,-115,153,-115,153,-130,132,-130,132,-139,105,-139,105,-153,85,-153,85,-163,69,-163,69,-160,53,-160,53,-162,36,-162,36,-171,25,-171,25,-176,18,-176,18,-162,14,-162,14,-145,15,-145,15,-128,23,-128,23,-136,33,-136,33,-142,38,-142,38,-155,54,-155,54,-143,70,-143,70,-130,87,-130,87,-127,100,-127,100,-107,112,-107,112,-94,126,-94,126,-81,141,-81,141,-77,145,-77,145,-65,149,-191,24,-205,10,-205,10,-213,-8,-213,-8,-217,-26,-217,-26,-217,-27,-217,-27,-220,-33,-220,-33,-221,-45,-221,-45,-205,-71,-205,-71,-194,-84,-194,-84,-197,-110,-197,-110,-202,-115,-202,-115,-203,-117,-203,-117,-191,-124,-191,-124,-184,-131,-184,-131,-183,-141,-183,-141,-176,-187,-176,-187,-178,-227,-178,-227,-165,-250,-165,-250,-144,-265,-144,-265,-129,-286,-129,-286,-113,-307,-113,-307,-84,-311,-84,-311,-57,-318,-57,-318,-36,-318,-36,-318,-9,-322,-9,-322,-6,-322,-6,-322,4,-322,-171,39,-191,18,-191,18,-198,7,-198,7,-200,-1,-200,-1,-200,-14,-200,-14,-196,-26,-196,-26,-191,-30,-191,-30,-170,-19,-170,-19,-156,-23,-156,-23,-150,-37,-150,-37,-142,-47,-142,-47,-99,-31,-99,-31,-94,-18,-94,-18,-83,-3,-83,-3,-77,18,-77,18,-77,31,-77,31,-77,48,-77,48,-77,51,-77,51,-80,57,-80,57,-84,61,-84,61,-76,67,-76,67,-76,67},
		{0,-22,-12,-13,-12,-13,-14,-4,-14,-4,-19,-2,-19,-2,-25,-7,-25,-7,-33,-12,-33,-12,-38,-18,-38,-18,-38,-23,-38,-23,-25,-39,-25,-39,-22,-46,-22,-46,-19,-59,-19,-59,-15,-65,-15,-65,-9,-73,-9,-73,-9,-78,-9,-78,-9,-85,-9,-85,-9,-85,-9,-85,-5,-99,-5,-99,0,-83,-171,-57,-171,-57,-171,-57,-154,-57,-154,-57,-141,-51,-141,-51,-122,-46,-122,-46,-107,-49,-107,-49,-91,-52,-91,-52,-81,-57,-81,-57,-65,-57,-65,-57,-58,-59,-58,-59,-48,-66,-48,-66,-47,-68,-57,-64,-49,-80,-49,-80,-47,-96,-47,-96,-47,-109,-47,-109,-52,-113,-52,-113,-60,-119,-60,-119,-64,-123,-64,-123,-73,-130,-73,-130,-85,-131,-85,-131,-95,-131,-95,-131,-102,-131,-102,-131,-114,-130,-114,-130,-132,-118,-132,-118,-141,-111,-141,-111,-150,-104,-150,-104,-157,-99,-157,-99,-158,-98,-158,-98,-160,-94,-160,-94,-162,-87,-162,-87,-162,-75,-162,-75,-162,-68,-162,-68,-157,-60,-157,-60,-149,-55,-215,-27,-215,-24,-215,-24,-199,-10,-199,-10,-199,-1,-199,-1,-195,8,-195,8,-187,16,-187,16,-161,9,-161,9,-148,-3,-148,-3,-130,-5,-130,-5,-116,-5,-116,-5,-108,-3,-108,-3,-81,6,-81,6,-81,8,-81,8,-72,20,-72,20,-71,33,-71,33,-71,35,-130,-5,-129,-5,-129,-5,-107,8,-107,8,-99,16,-99,16,-93,31,-93,31,-92,35,-92,35,-92,45,-92,45,-92,49,-92,49,-94,53,-94,53,-97,64,-97,64,-95,66,-95,66,-91,70,-91,70,-88,71,-88,71,-84,71,-84,71,-74,71,-82,52,-87,60,-87,60,-87,67,-87,67,-87,71,-87,71,-87,76,-87,76,-87,79,-87,79,-78,83,-78,83,-78,83,-78,83,-75,83,-67,58,-74,62,-74,62,-77,67,-77,67,-78,73,-78,73,-79,77,-79,77,-79,90,-79,90,-79,95,-79,95,-60,95,-60,95,-52,90,-52,90,-52,90,-52,90,-53,85,-53,85,-60,77,-60,77,-65,67,-65,67,-65,59,-65,59,-65,49,-47,59,-50,64,-50,64,-60,79,-60,79,-62,83,-62,83,-62,91,-62,91,-62,97,-62,97,-57,102,-57,102,-52,112,-52,112,-52,112,-52,112,-48,112,-48,112,-41,106,-41,106,-40,100,-40,100,-34,93,-34,93,-34,91,-34,91,-40,85,-40,85,-40,76,-40,76,-45,65,-45,65,-45,62,-29,70,-36,75,-36,75,-37,86,-37,86,-37,90,-37,90,-36,95,-36,95,-32,101,-32,101,-32,101,-32,101,-30,103,-30,103,-23,108,-23,108,-18,108,-18,108,-14,104,-14,104,-14,100,-14,100,-21,92,-21,92,-23,88,-23,88,-25,78,-25,78,-28,74,-28,74,-28,71,-9,69,-8,72,-8,72,-13,82,-13,82,-19,90,-19,90,-16,96,-16,96,-14,103,-14,103,-14,108,-14,108,-13,111,-13,111,-5,112,-5,112,-3,110,-3,110,-3,105,-3,105,0,100,0,100,2,93,2,93,-1,87,-1,87,-4,82,-4,82,-4,78,-4,78,-7,74,-7,74,-7,74,-88,90,-86,91,-86,91,-81,98,-81,98,-77,109,-77,109,-77,115,-77,115,-74,110,-74,110,-74,104,-74,104,-72,102,-72,102,-65,117,-65,117,-60,126,-60,126,-60,126,-60,126,-60,115,-60,115,-60,110,-60,110,-57,120,-57,120,-53,129,-53,129,-50,134,-50,134,-49,136,-49,136,-43,130,-43,130,-40,126,-40,126,-39,130,-39,130,-36,137,-36,137,-35,141,-35,141,-35,143,-35,143,-31,135,-31,135,-29,135,-29,135,-23,143,-23,143,-18,151,-18,151,-17,151,-17,151,-12,140,-12,140,-11,142,-11,142,-10,151,-10,151,-8,153,-8,153,-5,146,-5,146,0,138,-72,102,-75,95,-61,110,-64,102,-64,102,-65,100,-65,100,-65,97,-65,97,-64,93,-42,127,-44,123,-44,123,-46,119,-46,119,-46,114,-46,114,-46,112,-46,112,-47,111,-31,133,-31,125,-31,125,-33,119,-33,119,-34,117,-34,117,-34,110,-34,110,-33,107,-33,107,-32,106,-14,143,-14,135,-14,135,-14,124,-14,124,-15,116,-15,116,-22,112,-22,112,-25,110,-25,110,-28,110,-28,110,-35,115,-35,115,-28,124,-28,124,-27,131,-27,131,-27,136,-27,136,-27,141,-27,141,-26,146,-11,143,-11,135,-11,135,-11,125,-11,125,-5,115,-5,115,-2,113,-2,113,1,117,1,117,1,122,1,122,1,129,1,129,1,136,1,136,-6,148,-155,2,-141,13,-141,13,-132,29,-132,29,-122,46,-122,46,-121,73,-121,73,-121,88,-121,88,-105,99,-105,99,-104,107,-104,107,-107,136,-107,136,-97,144,-97,144,-60,175,-60,175,-56,185,-56,185,-44,191,-44,191,-37,191,-37,191,-29,192,-29,192,-12,197,-12,197,0,197,-204,-20,-210,-42,-210,-42,-184,-66,-184,-66,-179,-76,-188,-63,-185,-82,-185,-82,-172,-116,-172,-116,-173,-135,-173,-135,-176,-153,-176,-153,-177,-168,-177,-168,-182,-179,-182,-179,-182,-190,-182,-190,-177,-206,-177,-206,-173,-229,-173,-229,-169,-245,-169,-245,-162,-255,-162,-255,-152,-266,-152,-266,-138,-277,-138,-277,-114,-294,-114,-294,-72,-315,-72,-315,-42,-320,-42,-320,0,-325},
	};
	private double wing[]={
			-26,-16,-39,-19,-39,-19,-44,-18,-44,-18,-58,-14,-58,-14,-50,-14,-50,-14,-61,-12,-61,-12,-67,-9,-67,-9,-60,-10,-60,-10,-69,-7,-69,-7,-79,-5,-79,-5,-95,-6,-95,-6,-107,-8,-107,-8,-113,-14,-113,-14,-117,-24,-117,-24,-117,-20,-117,-20,-118,-29,-118,-29,-120,-35,-120,-35,-124,-40,-124,-40,-141,-48,-141,-48,-149,-48,-149,-48,-145,-46,-145,-46,-163,-48,-163,-48,-159,-46,-159,-46,-166,-45,-166,-45,-170,-45,-170,-45,-176,-43,-176,-43,-168,-44,-168,-44,-187,-39,-187,-39,-192,-40,-192,-40,-196,-43,-196,-43,-192,-40,-196,-43,-192,-38,-192,-38,-185,-37,-185,-37,-177,-38,-177,-38,-187,-34,-187,-34,-193,-35,-193,-35,-186,-32,-186,-32,-177,-32,-177,-32,-170,-34,-170,-34,-177,-31,-177,-31,-185,-29,-185,-29,-173,-30,-173,-30,-165,-31,-165,-31,-178,-27,-178,-27,-166,-26,-166,-26,-158,-28,-158,-28,-169,-23,-169,-23,-162,-24,-162,-24,-153,-29,-153,-29,-159,-23,-159,-23,-147,-27,-147,-27,-142,-30,-142,-30,-152,-23,-152,-23,-137,-28,-137,-28,-146,-24,-146,-24,-134,-22,-134,-22,-142,-21,-142,-21,-133,-19,-133,-19,-127,-14,-127,-14,-120,-8,-120,-8,-127,-10,-127,-10,-116,-6,-116,-6,-120,-6,-120,-6,-109,-3,-109,-3,-113,-2,-113,-2,-102,-2,-102,-2,-106,0,-106,0,-108,-1,-108,-1,-99,2,-99,2,-83,8,-83,8,-68,3,-68,3,-70,7,-70,7,-57,1,-57,1,-59,5,-59,5,-55,4,-55,4,-57,7,-57,7,-61,10,-61,10,-56,10,-56,10,-49,6,-49,6,-54,11,-54,11,-61,14,-61,14,-50,13,-50,13,-42,8,-42,8,-49,16,-49,16,-53,16,-53,16,-44,17,-44,17,-32,13,-32,13,-34,17,-34,17,-27,13,-192,-38,-219,-34,-219,-34,-234,-37,-234,-37,-242,-42,-242,-42,-232,-39,-232,-39,-217,-38,-217,-38,-194,-39,-194,-39,-193,-40,-240,-32,-224,-30,-224,-30,-187,-37,-240,-32,-244,-33,-244,-33,-236,-34,-236,-34,-221,-34,-226,-30,-231,-29,-231,-29,-235,-27,-235,-27,-216,-28,-216,-28,-191,-34,-188,-35,-181,-37,-217,-28,-221,-27,-221,-27,-224,-25,-224,-25,-207,-26,-207,-26,-189,-33,-209,-26,-213,-24,-213,-24,-215,-22,-215,-22,-198,-26,-198,-26,-187,-32,-201,-25,-205,-23,-205,-23,-208,-19,-208,-19,-196,-24,-196,-24,-182,-32,-199,-23,-203,-17,-203,-17,-199,-18,-199,-18,-194,-21,-194,-21,-182,-29,-194,-21,-196,-19,-196,-19,-197,-17,-197,-17,-197,-15,-197,-15,-191,-17,-191,-17,-189,-18,-189,-18,-178,-29,-190,-17,-191,-15,-191,-15,-191,-14,-191,-14,-186,-16,-186,-16,-183,-18,-183,-18,-176,-26,-146,-25,-180,-13,-180,-13,-186,-10,-186,-10,-188,-7,-188,-7,-181,-8,-181,-8,-171,-12,-171,-12,-144,-23,-178,-9,-182,-6,-182,-6,-184,-3,-184,-3,-174,-5,-174,-5,-142,-21,-185,-16,-188,-13,-188,-13,-189,-11,-189,-11,-186,-11,-186,-11,-180,-14,-180,-14,-173,-25,-168,-25,-179,-14,-160,-24,-172,-17,-177,-4,-180,0,-180,0,-182,6,-182,6,-180,6,-180,6,-171,2,-171,2,-136,-19,-173,3,-174,6,-174,6,-174,9,-174,9,-166,8,-166,8,-129,-15,-167,8,-168,11,-168,11,-168,14,-168,14,-161,13,-161,13,-153,9,-153,9,-128,-9,-157,11,-159,14,-159,14,-160,16,-160,16,-154,15,-154,15,-146,12,-146,12,-121,-7,-148,13,-149,15,-149,15,-149,18,-149,18,-141,16,-141,16,-129,8,-129,8,-116,-3,-138,14,-140,19,-140,19,-135,18,-135,18,-122,11,-122,11,-109,-1,-132,17,-132,20,-132,20,-122,17,-122,17,-108,8,-108,8,-103,2,-119,15,-121,19,-121,19,-121,21,-121,21,-112,17,-112,17,-101,8,-101,8,-98,4,-114,18,-115,20,-115,20,-115,22,-115,22,-105,19,-105,19,-93,8,-93,8,-92,6,-106,20,-107,21,-107,21,-107,23,-107,23,-102,21,-102,21,-91,12,-91,12,-88,7,-92,7,-89,6,-99,6,-96,4,-110,1,-107,0,-117,-1,-113,-3,-123,-5,-119,-6,-131,-6,-123,-9,-134,-11,-127,-14,-140,-16,-133,-18,-147,-18,-139,-20,-148,-21,-140,-23,-67,6,-73,10,-73,10,-75,13,-75,13,-71,13,-71,13,-62,10,-62,10,-56,6,-56,6,-68,14,-68,14,-69,16,-69,16,-65,16,-65,16,-56,14,-56,14,-65,18,-65,18,-56,18,-56,18,-50,17,-50,17,-60,21,-60,21,-47,19,-47,19,-39,16,-39,16,-53,22,-53,22,-41,20,-41,20,-34,15,-34,15,-46,27,-46,27,-37,23,-37,23,-33,17,-33,17,-37,27,-37,27,-31,22,-31,22,-30,16,-30,16,-30,24,-30,24,-27,14,-99,19,-100,22,-100,22,-100,26,-100,26,-96,23,-96,23,-84,10,-84,10,-84,8,-94,21,-95,23,-95,23,-95,25,-95,25,-86,22,-86,22,-78,10,-78,10,-78,7,-84,20,-84,23,-84,23,-78,21,-78,21,-73,16,-73,16,-72,13,-77,8,-74,6,-80,22,-88,27,-88,27,-90,30,-90,30,-83,29,-83,29,-76,26,-76,26,-66,17,-86,29,-91,33,-91,33,-96,33,-96,33,-87,36,-87,36,-74,31,-74,31,-64,19,-78,33,-83,41,-83,41,-89,44,-89,44,-76,42,-76,42,-66,34,-66,34,-60,20,-73,41,-74,48,-74,48,-76,51,-76,51,-66,47,-66,47,-59,39,-59,39,-55,27,-55,27,-53,21,-69,48,-69,55,-69,55,-64,53,-64,53,-54,47,-54,47,-49,38,-49,38,-45,23,-57,49,-57,54,-57,54,-51,50,-51,50,-42,36,-42,36,-40,26,-48,49,-49,56,-49,56,-42,45,-42,45,-36,27,-42,46,-42,48,-42,48,-37,44,-37,44,-34,31,-34,31,-33,25,-36,41,-35,43,-35,43,-31,34,-31,34,-31,24,-31,36,-31,38,-31,38,-29,36,-29,36,-27,26,-27,26,-26,30,-26,30,-25,26,-25,26,-23,36,-23,36,-22,27,-22,27,-20,31,-20,31,-23,23,-236,-38,-253,-42,-253,-42,-318,-65,-318,-65,-332,-78,-332,-78,-333,-89,-333,-89,-330,-96,-330,-96,-336,-88,-336,-88,-335,-75,-335,-75,-319,-62,-319,-62,-301,-54,-301,-54,-245,-36,-245,-36,-230,-35,-266,-42,-305,-52,-305,-52,-332,-56,-332,-56,-340,-61,-340,-61,-345,-65,-345,-65,-338,-57,-338,-57,-327,-50,-327,-50,-305,-46,-305,-46,-278,-38,-278,-38,-259,-35,-259,-35,-244,-33,-287,-40,-324,-45,-324,-45,-337,-51,-337,-51,-323,-40,-323,-40,-305,-37,-305,-37,-282,-29,-282,-29,-244,-26,-244,-26,-231,-29,-296,-33,-320,-36,-320,-36,-328,-40,-328,-40,-316,-31,-316,-31,-297,-27,-297,-27,-270,-21,-270,-21,-241,-21,-241,-21,-224,-25,-288,-24,-306,-25,-306,-25,-320,-30,-320,-30,-300,-18,-300,-18,-276,-17,-276,-17,-256,-14,-256,-14,-230,-19,-230,-19,-215,-23,-285,-17,-300,-15,-300,-15,-308,-18,-308,-18,-297,-12,-297,-12,-272,-12,-272,-12,-250,-10,-250,-10,-218,-17,-218,-17,-208,-21,-279,-12,-296,-9,-296,-9,-303,-11,-303,-11,-294,-6,-294,-6,-268,-7,-268,-7,-243,-6,-243,-6,-207,-15,-207,-15,-204,-17,-271,-6,-287,-1,-287,-1,-294,-1,-294,-1,-278,3,-278,3,-246,0,-246,0,-204,-9,-204,-9,-193,-14,-261,2,-272,8,-272,8,-259,8,-259,8,-198,-6,-198,-6,-190,-11,-252,7,-260,10,-260,10,-264,13,-264,13,-241,12,-241,12,-193,-2,-193,-2,-184,-7,-249,12,-255,16,-255,16,-257,19,-257,19,-227,16,-227,16,-187,2,-187,2,-180,-1,-238,18,-243,20,-243,20,-247,24,-247,24,-210,19,-210,19,-178,6,-222,21,-232,24,-232,24,-235,26,-235,26,-204,24,-204,24,-168,9,-207,25,-212,28,-212,28,-213,31,-213,31,-183,21,-183,21,-169,14,-196,26,-201,30,-201,30,-177,25,-177,25,-160,15,-185,27,-190,31,-190,31,-191,35,-191,35,-177,30,-177,30,-157,16,-169,25,-175,30,-175,30,-176,32,-176,32,-153,23,-153,23,-151,20,-151,20,-150,18,-158,25,-161,30,-161,30,-150,26,-150,26,-141,18,-153,28,-153,31,-153,31,-138,26,-138,26,-132,21,-141,27,-146,32,-146,32,-131,27,-131,27,-123,20,-136,30,-140,35,-140,35,-132,34,-132,34,-119,23,-131,33,-136,40,-136,40,-123,34,-123,34,-110,23,-124,35,-127,43,-127,43,-116,37,-116,37,-105,23,-115,36,-116,40,-116,40,-104,35,-104,35,-100,30,-100,30,-97,25,-102,32,-105,39,-105,39,-96,35,-92,32,-90,25,-91,36,-92,41,-92,41,-88,37,
	};
	private double fwing[]={
			-23,-23,-37,-22,-37,-22,-31,-21,-31,-21,-52,-21,-52,-21,-46,-19,-46,-19,-39,-19,-39,-19,-52,-11,-52,-11,-63,-10,-63,-10,-68,-13,-68,-13,-64,-8,-64,-8,-60,-7,-60,-7,-66,-7,-66,-7,-69,-9,-69,-9,-67,-6,-67,-6,-83,-11,-83,-11,-97,-22,-97,-22,-103,-32,-103,-32,-103,-40,-103,-40,-105,-44,-105,-44,-105,-40,-105,-40,-108,-50,-108,-50,-116,-57,-116,-57,-124,-60,-124,-60,-127,-62,-127,-62,-124,-58,-124,-58,-140,-62,-140,-62,-149,-61,-149,-61,-153,-62,-153,-62,-148,-60,-148,-60,-144,-59,-144,-59,-154,-58,-154,-58,-157,-59,-157,-59,-153,-56,-153,-56,-159,-54,-159,-54,-164,-50,-164,-50,-172,-39,-172,-39,-168,-41,-168,-41,-175,-33,-175,-33,-179,-24,-179,-24,-183,-21,-183,-21,-176,-24,-176,-24,-174,-26,-174,-26,-180,-17,-180,-17,-186,-13,-186,-13,-177,-17,-177,-17,-166,-23,-166,-23,-169,-18,-169,-18,-150,-27,-150,-27,-152,-24,-152,-24,-137,-29,-137,-29,-131,-36,-131,-36,-133,-31,-133,-31,-126,-35,-126,-35,-117,-42,-117,-42,-117,-38,-117,-38,-120,-35,-120,-35,-113,-39,-113,-39,-112,-44,-178,-23,-181,-16,-181,-15,-185,6,-185,6,-184,14,-184,14,-180,7,-180,7,-176,-17,-181,9,-181,26,-181,26,-178,34,-178,34,-177,27,-177,27,-174,11,-174,11,-170,-18,-183,12,-183,91,-183,91,-173,131,-173,131,-173,139,-173,139,-170,128,-170,128,-177,84,-177,84,-177,30,-176,24,-174,39,-174,39,-170,47,-170,47,-169,29,-169,29,-167,12,-167,12,-165,-19,-169,35,-166,52,-166,52,-159,60,-159,60,-162,38,-162,38,-159,0,-159,0,-159,-21,-160,49,-157,55,-157,55,-153,47,-153,47,-151,1,-151,1,-153,-22,-153,43,-150,48,-150,48,-146,52,-146,52,-145,38,-145,38,-144,-4,-144,-4,-148,-23,-171,123,-152,171,-152,171,-151,180,-151,180,-149,166,-149,166,-167,111,-167,111,-173,42,-144,32,-142,38,-142,38,-138,26,-138,26,-138,-10,-138,-10,-143,-26,-138,20,-136,28,-136,28,-131,13,-131,13,-134,-18,-134,-18,-138,-27,-132,16,-130,19,-130,19,-125,4,-125,4,-130,-22,-130,-22,-134,-31,-127,-7,-124,-3,-124,-3,-123,-17,-123,-17,-130,-30,-123,-15,-120,-13,-120,-13,-120,-21,-120,-21,-128,-32,-120,-20,-119,-19,-119,-19,-118,-26,-118,-26,-125,-33,-118,-25,-117,-23,-117,-23,-116,-30,-116,-30,-123,-36,-149,170,-143,184,-143,184,-142,192,-142,192,-140,178,-140,178,-157,121,-157,121,-165,55,-144,163,-140,170,-140,170,-137,179,-137,179,-139,161,-139,161,-153,114,-153,114,-158,55,-141,153,-138,159,-138,159,-137,165,-137,165,-135,151,-135,151,-149,108,-149,108,-154,50,-145,121,-142,126,-142,126,-140,133,-140,133,-140,119,-140,119,-147,91,-147,91,-150,51,-146,95,-142,103,-142,103,-141,94,-141,94,-145,49,-142,80,-139,92,-139,92,-136,96,-136,96,-134,75,-134,75,-140,36,-135,78,-133,83,-133,83,-128,66,-128,66,-135,28,-128,68,-126,72,-126,72,-123,57,-123,57,-131,23,-123,59,-121,62,-121,62,-117,48,-117,48,-123,21,-123,21,-126,17,-118,39,-116,42,-116,42,-115,31,-115,31,-120,8,-120,8,-125,-1,-117,22,-115,25,-115,25,-113,14,-113,14,-121,-10,-118,-2,-113,5,-113,5,-114,-10,-114,-10,-118,-18,-112,-18,-105,-16,-105,-16,-109,-15,-109,-15,-95,-10,-95,-10,-99,-7,-99,-7,-102,-6,-102,-6,-92,-6,-92,-6,-95,-3,-95,-3,-59,4,-59,4,-64,6,-64,6,-58,7,-58,7,-66,13,-66,13,-72,14,-72,14,-60,15,-60,15,-46,12,-46,12,-49,15,-49,15,-37,13,-37,13,-41,16,-41,16,-31,20,-31,20,-33,23,-33,23,-36,23,-36,23,-29,25,-29,25,-22,26,-61,16,-65,19,-65,19,-55,19,-55,19,-45,15,-57,19,-61,22,-61,22,-50,22,-50,22,-38,18,-53,22,-58,25,-58,25,-48,26,-48,26,-32,21,-41,24,-48,28,-48,28,-39,28,-39,28,-30,25,-34,27,-36,31,-36,31,-27,29,-27,29,-25,27,-28,29,-30,32,-30,32,-18,27,-113,-23,-115,-16,-109,-16,-112,-9,-104,-13,-110,4,-97,-5,-110,17,-89,0,-106,23,-106,23,-107,30,-107,30,-97,22,-97,22,-80,1,-99,24,-101,32,-101,32,-89,25,-89,25,-71,3,-92,27,-94,30,-94,30,-79,22,-79,22,-65,4,-83,25,-84,31,-84,31,-73,25,-73,25,-66,15,-71,23,-73,29,-73,29,-63,23,-63,23,-61,20,-110,17,-110,26,-110,26,-106,24,-110,4,-114,20,-114,20,-114,24,-114,24,-110,20,-112,-8,-113,-3,-101,2,-102,6,-102,6,-94,2,-94,2,-90,-2,-92,0,-94,5,-94,5,-88,2,-88,2,-85,0,-106,-5,-107,1,-107,1,-102,-1,-102,-1,-96,-6,-112,-9,-112,-5,-112,-5,-108,-7,-108,-7,-104,-13,-87,2,-88,5,-88,5,-81,2,-81,2,-79,0,-82,3,-82,6,-82,6,-75,4,-75,4,-72,2,-74,4,-75,7,-75,7,-68,5,-68,5,-66,3,-69,6,-70,8,-70,8,-64,8,-64,8,-61,7,-65,8,-68,10,-68,10,-62,10,-67,26,-71,37,-71,37,-75,40,-75,40,-67,37,-67,37,-61,27,-61,27,-56,23,-64,32,-65,36,-65,36,-67,40,-67,40,-59,32,-59,32,-57,28,-57,28,-52,26,-60,33,-60,36,-60,36,-55,32,-55,32,-53,29,-53,29,-48,27,-52,29,-53,33,-53,33,-50,31,-50,31,-43,29,-42,28,-43,32,-43,32,-40,31,-40,31,-35,28,
	};
	private double halo[]={
			0,-35,-1,-34,-1,-34,0,-33,-25,-25,-25,-23,-25,-23,-23,-23,-23,-23,-23,-25,-23,-25,-25,-25,-35,0,-34,-1,-34,-1,-33,0,-33,0,-34,1,-34,1,-35,0,-25,23,-25,25,-25,25,-23,25,-23,25,-23,23,-23,23,-25,23,0,33,-1,34,-1,34,0,35,-3,-36,0,-70,-70,0,-36,-3,-70,0,-36,3,0,70,-3,36,-45,-45,-27,-24,-45,-45,-24,-27,-45,45,-24,27,-45,45,-27,24,
			0,-25,3,-31,0,25,3,31,25,0,31,-3,25,0,31,3,20,20,24,21,20,20,21,24,20,-20,21,-24,20,-20,24,-21,
			0,-70,0,-36,0,-32,0,-25,0,32,0,25,0,36,0,70,32,0,25,0,36,0,70,0,20,-20,23,-23,20,20,23,23,45,45,26,26,45,-45,26,-26,
	};
	private double scale=0.075, wscale=0.5, hscale=1;
	public void render(Camera c) {
		
		// render
		GL11.glDisable(GL11.GL_TEXTURE_2D);
		
		// render halo
		GL11.glPushMatrix();
		GL11.glTranslatef(c.$cx(x), c.$cy(y-12), 0);
		GL11.glRotatef((float)Math.toDegrees(tt), 0, 0, 1);
		setRadarColor(1);
		renderLinesFlip(halo, hscale, c);
		GL11.glPopMatrix();
		
		GL11.glDisable(GL11.GL_TEXTURE_2D);
		GL11.glPushMatrix();
		GL11.glTranslatef(c.$cx(x), c.$cy(y-12), 0);
		GL11.glRotatef((float)Math.toDegrees(tt), 0, 0, 1);
		setRadarColor(1);
		int seg=16;
		double ci=2*Math.PI;
		GL11.glBegin(GL11.GL_LINES);
		for(double i=0;i<ci;i+=ci/seg){
			double dxyx1,dxyy1,dxyx2,dxyy2;
			double a=32*c.$zoom()*hscale;
			dxyx1=Vector.vectorToDx(i,a);
			dxyy1=Vector.vectorToDy(i,a);
			dxyx2=Vector.vectorToDx(i+(ci/seg),a);
			dxyy2=Vector.vectorToDy(i+(ci/seg),a);
			GL11.glVertex2d(dxyx1, dxyy1);
			GL11.glVertex2d(dxyx2, dxyy2);
			a=36*c.$zoom()*hscale;
			dxyx1=Vector.vectorToDx(i,a);
			dxyy1=Vector.vectorToDy(i,a);
			dxyx2=Vector.vectorToDx(i+(ci/seg),a);
			dxyy2=Vector.vectorToDy(i+(ci/seg),a);
			GL11.glVertex2d(dxyx1, dxyy1);
			GL11.glVertex2d(dxyx2, dxyy2);
		}
		GL11.glEnd();
		GL11.glPopMatrix();
		
		// render halo r
		//GL11.glColor4d(1, 0, 0, 1);
		//GL11.glBegin(GL11.GL_LINES);
		//VectorGraphics.renderVectorCircle(x, y-12, halor, 32, c);
		//GL11.glEnd();
		
		//for(int wt=90;wt<=360+90;wt+=60){
		//	renderWing(wt, wscale, true, c);
		//}
		
		renderWing(-55, wscale, false, true, c);
		renderWing(-5, wscale, false, true, c);
		renderWing(5, wscale, false, false, c);
		renderWing(55, wscale, false, false, c);
		
		renderWing(-45, wscale, true, false, c);
		renderWing(45, wscale, true, true, c);
		
		// render floating skull
		GL11.glPushMatrix();
		GL11.glTranslatef(c.$cx(x), c.$cy(y), 0);
		//GL11.glRotatef((float)Math.toDegrees(tt), 0, 0, 1);
		setRadarColor(1);
		renderLinesFlip(skull[game.$prng().$int(0,2)], scale, c);
		GL11.glPopMatrix();
		
		//renderCollisionBounds(c, 32);
		
		GL11.glEnable(GL11.GL_TEXTURE_2D);
		//CharGraphics.drawString(state.$prng().$string(1), (int)c.$cx(x-1.5), (int)c.$cy(y-4-(5*scale)), 1.75f);
	}
	
	// helper render methods, move later
	private void renderLinesFlip(double[] l, double scale, Camera c){
		GL11.glDisable(GL11.GL_TEXTURE_2D);
		GL11.glBegin(GL11.GL_LINES);
		for(int i=0; i<l.length; i+=4){
			GL11.glVertex2d(l[i]*c.$zoom()*scale, l[i+1]*c.$zoom()*scale);
			GL11.glVertex2d(l[i+2]*c.$zoom()*scale, l[i+3]*c.$zoom()*scale);
			GL11.glVertex2d(-l[i]*c.$zoom()*scale, l[i+1]*c.$zoom()*scale);
			GL11.glVertex2d(-l[i+2]*c.$zoom()*scale, l[i+3]*c.$zoom()*scale);
		}
		GL11.glEnd();
		GL11.glEnable(GL11.GL_TEXTURE_2D);
	}
	
	private void renderWing(double wt, double scale, boolean f, boolean flip, Camera c){
		double[] l=!f?wing:fwing;
		GL11.glPushMatrix();
		GL11.glTranslatef(c.$cx(x), c.$cy(y), 0);
		GL11.glRotatef((float)wt%360, 0, 0, 1);
		setRadarColor(1);
		GL11.glDisable(GL11.GL_TEXTURE_2D);
		GL11.glBegin(GL11.GL_LINES);
		for(int i=0; i<l.length; i+=4){
			if(flip){
				GL11.glVertex2d(32-l[i]*c.$zoom()*scale, l[i+1]*c.$zoom()*scale);
				GL11.glVertex2d(32-l[i+2]*c.$zoom()*scale, l[i+3]*c.$zoom()*scale);
			}else{
				GL11.glVertex2d(-32+l[i]*c.$zoom()*scale, l[i+1]*c.$zoom()*scale);
				GL11.glVertex2d(-32+l[i+2]*c.$zoom()*scale, l[i+3]*c.$zoom()*scale);
			}
		}
		GL11.glEnd();
		GL11.glEnable(GL11.GL_TEXTURE_2D);
		GL11.glPopMatrix();
	}
	
	//public boolean isCollidable(){
	//	return false;
	//}
	
	public void onDeath() {
		active=true;
	}


}


